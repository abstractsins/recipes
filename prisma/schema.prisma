// https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  nickname    String?
  username    String?
  recipes     Recipe[]
  ingredients Ingredient[]
  tags        Tag[]
  role        Role         @default(user)
  lastLogin   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

enum Role {
  user
  admin
}

model Recipe {
  id          Int                @id @default(autoincrement())
  name        String
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  ingredients RecipeIngredient[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())
  RecipeTag   RecipeTag[]
  seasons     Season[]           @relation("RecipeSeasons")

  @@unique([userId, name])
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  quantity     String // e.g. "3"
  unit         String // e.g. "oz"
  prepMethod   String? // e.g. "chopped"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@unique([recipeId, ingredientId])
}

model Season {
  id          Int          @id @default(autoincrement())
  name        String
  ingredients Ingredient[] @relation("IngredientSeasons")
  recipes     Recipe[]     @relation("RecipeSeasons")
}

model Ingredient {
  id            Int                @id @default(autoincrement())
  name          String
  main          String?
  variety       String?
  category      String?
  subcategory   String?
  notes         String?
  userId        Int
  user          User               @relation(fields: [userId], references: [id])
  recipes       RecipeIngredient[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  IngredientTag IngredientTag[]
  seasons       Season[]           @relation("IngredientSeasons")

  @@unique([userId, name])
}

model Tag {
  id            Int     @id @default(autoincrement())
  name          String
  type          TagType
  createdBy     Int?
  createdByUser User?   @relation(fields: [createdBy], references: [id])

  ingredientTags IngredientTag[]
  recipeTags     RecipeTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, type, createdBy])
}

model IngredientTag {
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  tag          Tag        @relation(fields: [tagId], references: [id])
  tagId        Int

  @@id([ingredientId, tagId]) // composite PK keeps duplicates out
}

model RecipeTag {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    Int

  @@id([recipeId, tagId])
}


enum TagType {
  recipe
  ingredient
  season
}
