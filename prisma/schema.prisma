// https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  password    String
  nickname    String?
  username    String?
  recipes     Recipe[]
  ingredients Ingredient[]
  tags        Tag[]
  role        Role         @default(user)
  lastLogin   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

enum Role {
  user
  admin
}

model Recipe {
  id          Int                @id @default(autoincrement())
  name        String
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  ingredients RecipeIngredient[]
  tags        Tag[]              @relation("RecipeTags")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now())

  @@unique([userId, name])
}

model RecipeIngredient {
  id           Int        @id @default(autoincrement())
  recipe       Recipe?     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  quantity     String // e.g. "3"
  unit         String // e.g. "oz"
  prepMethod   String? // e.g. "chopped"
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())

  @@unique([recipeId, ingredientId])
}

model Ingredient {
  id          Int                @id @default(autoincrement())
  name        String // freeform label
  main        String? // optional structured base
  variety     String? // optional variety
  category    String? // e.g. "vegetable", "spice", "meat"
  subcategory String? // e.g. "starch", ""
  seasons     String[]
  notes       String? // freeform notes
  userId      Int
  user        User               @relation(fields: [userId], references: [id])
  recipes     RecipeIngredient[]
  tags        Tag[]              @relation("IngredientTags")
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @default(now()) @updatedAt

  @@unique([userId, name])
}

model Tag {
  id            Int          @id @default(autoincrement())
  name          String
  type          TagType
  ingredients   Ingredient[] @relation("IngredientTags")
  recipes       Recipe[]     @relation("RecipeTags")
  createdBy     Int? // null = system tag, otherwise user-specific
  createdByUser User?        @relation(fields: [createdBy], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt

  @@unique([name, type, createdBy]) // âœ… unique per user (or globally if createdBy is null)
}

enum TagType {
  recipe
  ingredient
}
